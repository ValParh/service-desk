// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id          Int      @id @default(autoincrement())
  email       String   @unique
  passwordHash String  @map("password_hash")
  firstName   String   @map("first_name")
  lastName    String   @map("last_name")
  middleName  String?  @map("middle_name")
  phone       String?
  role        String   @default("CLIENT")
  department  String?
  position    String?
  employeeId  String?  @map("employee_id")
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  lastLogin   DateTime? @map("last_login")

  // Relations
  clientTickets     Ticket[]        @relation("ClientTickets")
  assignedTickets   Ticket[]        @relation("AssignedTickets")
  ticketComments    TicketComment[]
  articles          KnowledgeBaseArticle[]
  articleVotes      ArticleVote[]
  sessions          UserSession[]

  @@map("users")
}

model Category {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  color       String   @default("#6B7280")
  createdAt   DateTime @default(now()) @map("created_at")

  // Relations
  tickets Ticket[]

  @@map("categories")
}

model Ticket {
  id           Int            @id @default(autoincrement())
  ticketNumber String         @unique @map("ticket_number")
  title        String
  description  String
  status       String         @default("NEW")
  priority     String         @default("MEDIUM")
  categoryId   Int?           @map("category_id")
  clientId     Int            @map("client_id")
  assignedTo   Int?           @map("assigned_to")
  createdAt    DateTime       @default(now()) @map("created_at")
  updatedAt    DateTime       @updatedAt @map("updated_at")
  closedAt     DateTime?      @map("closed_at")

  // Relations
  category     Category?       @relation(fields: [categoryId], references: [id])
  client       User           @relation("ClientTickets", fields: [clientId], references: [id])
  assignedUser User?          @relation("AssignedTickets", fields: [assignedTo], references: [id])
  comments     TicketComment[]

  @@map("tickets")
}

model TicketComment {
  id         Int      @id @default(autoincrement())
  ticketId   Int      @map("ticket_id")
  authorId   Int      @map("author_id")
  content    String
  isInternal Boolean  @default(false) @map("is_internal")
  createdAt  DateTime @default(now()) @map("created_at")

  // Relations
  ticket Ticket @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  author User   @relation(fields: [authorId], references: [id])

  @@map("ticket_comments")
}

model KnowledgeBaseArticle {
  id              Int           @id @default(autoincrement())
  title           String
  content         String
  category        String
  tags            String?
  authorId        Int           @map("author_id")
  views           Int           @default(0)
  helpfulVotes    Int           @default(0) @map("helpful_votes")
  notHelpfulVotes Int           @default(0) @map("not_helpful_votes")
  isPublished     Boolean       @default(false) @map("is_published")
  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime      @updatedAt @map("updated_at")

  // Relations
  author User          @relation(fields: [authorId], references: [id])
  votes  ArticleVote[]

  @@map("knowledge_base_articles")
}

model ArticleVote {
  id         Int      @id @default(autoincrement())
  articleId  Int      @map("article_id")
  userId     Int      @map("user_id")
  isHelpful  Boolean  @map("is_helpful")
  createdAt  DateTime @default(now()) @map("created_at")

  // Relations
  article KnowledgeBaseArticle @relation(fields: [articleId], references: [id], onDelete: Cascade)
  user    User                 @relation(fields: [userId], references: [id])

  @@unique([articleId, userId])
  @@map("article_votes")
}

model UserSession {
  id        String   @id
  userId    Int      @map("user_id")
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_sessions")
}
